{"version":3,"file":"component---src-templates-post-template-tsx-d98358a1e407891b2724.js","mappings":"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","sources":["webpack://gatsby-starter-for-devseop/./src/components/content/PostNav.tsx","webpack://gatsby-starter-for-devseop/./src/components/content/Content.tsx","webpack://gatsby-starter-for-devseop/./src/components/content/CommentWidget.tsx","webpack://gatsby-starter-for-devseop/./src/components/content/TableOfContents.tsx","webpack://gatsby-starter-for-devseop/./src/templates/PostTemplate.tsx"],"sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\ntype PostNavProps = {\n  posts: {\n    node: {\n      id: string;\n      fields: {\n        slug: string;\n      };\n      frontmatter: {\n        title: string;\n        date: string;\n      };\n    };\n  }[];\n};\n\nconst PostNav = ({ posts }: PostNavProps) => {\n  return (\n    <NavContainer>\n      <ContentWrapper>\n        <Title>작성글</Title>\n        <ListWrapper>\n          {posts?.map(({ node }) => (\n            <PostLinkItem key={node.id}>\n              <a href={node.fields.slug}>{node.frontmatter.title}</a>\n            </PostLinkItem>\n          ))}\n        </ListWrapper>\n      </ContentWrapper>\n    </NavContainer>\n  );\n};\n\nconst NavContainer = styled.aside`\n  width: 360px;\n`;\n\nconst ContentWrapper = styled.nav`\n  padding: 16px 40px 0 0;\n  opacity: 0.3;\n  transition: opacity 0.2s ease-in-out;\n  overflow-y: auto;\n  position: sticky;\n  top: 94px;\n  max-height: calc(100vh - 54px - 40px);\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nconst Title = styled.h1`\n  margin: 0 0 16px 12px;\n  color: #222;\n  font-size: 24px;\n  font-weight: 500;\n  line-height: 1;\n  letter-spacing: -0.72px;\n`;\n\nconst ListWrapper = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  list-style-type: none;\n`;\n\nconst PostLinkItem = styled.li`\n  padding: 12px;\n  border-radius: 6px;\n  filter: grayscale(100%);\n  transition: filter 0.2s ease-in-out;\n  cursor: pointer;\n\n  &:hover {\n    filter: none;\n    background-color: rgba(0, 0, 0, 0.07);\n  }\n\n  a {\n    color: #222;\n    text-decoration: none;\n    line-height: 1.4;\n\n    &:visited {\n      color: #222;\n      text-decoration: none;\n    }\n  }\n`;\n\nexport default PostNav;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\ninterface PostContentProps {\n  title: string;\n  date: string;\n  html: string;\n}\n\nconst Content = ({ title, date, html }: PostContentProps) => {\n  //* React는 XSS 공격을 막기 위해 렌더링 메소드 내부에서 html 태그가 담겨있는 string 형태를 렌더링하면,\n  //* 태그가 적용되지 않고 문자열 그대로 렌더링 된다.\n  //* dangerouslySetInnerHTML은 이러한 취약점이 있다는 것을 알고 사용해야 한다.\n\n  return (\n    <>\n      <Container>\n        <Title>{title}</Title>\n        <PostDate>{date}</PostDate>\n      </Container>\n      <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n    </>\n  );\n};\n\nconst Container = styled.header`\n  display: flex;\n  flex-direction: column;\n  min-width: 644px;\n  max-width: 644px;\n  margin: 0 auto;\n`;\n\nconst Title = styled.h2`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 36px;\n  font-weight: 700;\n  line-height: 1.2;\n  margin-bottom: 12px;\n  color: #222;\n`;\n\nconst PostDate = styled.p`\n  font-size: 14px;\n  color: #222;\n`;\n\nconst MarkdownRenderer = styled.article`\n  // Renderer Style\n  display: flex;\n  flex-direction: column;\n  width: 644px;\n  margin: 0 auto;\n  padding: 64px 0;\n  word-break: break-all;\n  color: #222;\n\n  // Markdown Style\n  line-height: 1.5;\n  font-size: 17px;\n  font-weight: 400;\n\n  // Apply Padding Attribute to All Elements\n  p {\n    padding: 0;\n  }\n\n  // Adjust Heading Element Style\n  h1,\n  h2,\n  h3 {\n    font-weight: 700;\n    margin-bottom: 16px;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 40px;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 32px;\n  }\n\n  h2 {\n    font-size: 24px;\n  }\n\n  h3 {\n    font-size: 20px;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 32px 0;\n    padding: 20px 32px 20px;\n    border-left: 4px solid #4263eb;\n    font-weight: 400;\n    background: rgba(34, 34, 34, 0.05);\n    line-height: 1.5;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n    // padding: 30px 0;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 0.5px solid rgba(34, 34, 34, 0.5);\n    margin: 64px 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  // Adjust Talbe Style\n  table {\n    margin: 24px 0;\n    // padding: 12px 16px;\n    background-color: rgba(34, 34, 34, 0.05);\n    border: 0.5px solid rgba(34, 34, 34, 0.3);\n    font-size: 14px;\n    width: fit-content;\n    min-width: 40%;\n    max-width: 100%;\n    border-collapse: collapse;\n    box-sizing: inherit;\n  }\n\n  th {\n    padding: 8px;\n    border-bottom: 3px solid rgba(34, 34, 34, 0.3);\n  }\n\n  td {\n    padding: 8px;\n  }\n\n  table td + td,\n  table th + th {\n    border-left: 0.5px solid rgba(34, 34, 34, 0.3);\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 16px 0;\n    padding: 16px 20px;\n    font-size: 14px;\n    border-radius: 10px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n\n  pre > code {\n    font-family: 'JetBrains Mono';\n\n    // Code Block Style\n    .token.function {\n      color: #b392f0;\n    }\n\n    .token.keyword,\n    .token.operator {\n      color: #f97583;\n    }\n\n    .token.string,\n    .token.constant,\n    .token.boolean,\n    .token.number {\n      color: #9ecbff;\n    }\n\n    .token.parameter {\n      color: #ffab70;\n    }\n\n    .token.literal-property.property {\n      color: #fff;\n    }\n  }\n\n  // Markdown Responsive Design\n  @media (max-width: 768px) {\n    width: 644px;\n    padding: 80px 20px;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    h4 {\n      font-size: 17px;\n      font-weight: 500;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 50px 0;\n    }\n  }\n`;\n\nexport default Content;\n","import React, { createRef, useEffect } from 'react';\nimport styled from '@emotion/styled';\n\nconst src = 'https://utteranc.es/client.js';\nconst repo = 'devseop/devseop.github.io';\n\ntype UtterancesAttributesType = {\n  src: string;\n  repo: string;\n  'issue-term': string;\n  label: string;\n  theme: string;\n  crossorigin: string;\n  async: string;\n};\n\nconst CommentWidget = () => {\n  const element = createRef<HTMLDivElement>();\n\n  useEffect(() => {\n    if (element.current === null) return;\n\n    const utterances: HTMLScriptElement = document.createElement('script');\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    };\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value);\n    });\n\n    element.current.appendChild(utterances);\n  }, []);\n\n  return <UtterancesWrapper ref={element} />;\n};\n\nconst UtterancesWrapper = styled.div`\n  width: 644px;\n  margin: 0 auto;\n`;\n\nexport default CommentWidget;\n","import styled from '@emotion/styled';\n\nconst TableOfContents = ({ content }: { content: string }) => {\n  return (\n    <Container>\n      <StyledToc dangerouslySetInnerHTML={{ __html: content }} />\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  width: 360px;\n`;\n\nconst StyledToc = styled.div`\n  padding: 16px 0 0 40px;\n  opacity: 0.3;\n  transition: opacity 0.2s ease-in-out;\n  overflow-y: auto;\n  position: sticky;\n  top: 94px;\n  max-height: calc(100vh - 54px - 40px);\n\n  &:hover {\n    opacity: 1;\n  }\n\n  ul {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    list-style-type: none;\n  }\n\n  li {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  p {\n    padding: 12px;\n    border-radius: 6px;\n    color: #222;\n    text-decoration: none;\n    line-height: 1.4;\n    filter: grayscale(100%);\n    transition: filter 0.2s ease-in-out;\n\n    &:hover {\n      filter: none;\n      background-color: rgba(0, 0, 0, 0.07);\n    }\n\n    a {\n      padding: 0;\n      border-radius: 0;\n      background-color: transparent;\n      filter: none;\n      transition: none;\n\n      &:hover {\n        background-color: transparent;\n      }\n    }\n  }\n\n  a {\n    padding: 12px;\n    border-radius: 6px;\n    color: #222;\n    text-decoration: none;\n    line-height: 1.4;\n    filter: grayscale(100%);\n    transition: filter 0.2s ease-in-out;\n\n    &:hover {\n      filter: none;\n      background-color: rgba(0, 0, 0, 0.07);\n    }\n\n    &:visited {\n      color: #222;\n      text-decoration: none;\n    }\n  }\n`;\n\nexport default TableOfContents;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport styled from '@emotion/styled';\n\nimport Template from 'components/common/Template';\nimport PostNav from 'components/content/PostNav';\nimport Content from 'components/content/Content';\nimport CommentWidget from 'components/content/CommentWidget';\n\nimport { PostPageItemType } from '../types/types';\nimport TableOfContents from 'components/content/TableOfContents';\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[];\n    };\n  };\n  pageContext: {\n    allPosts: any[];\n  };\n  location: {\n    href: string;\n  };\n};\n\nconst PostTemplate = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  pageContext: { allPosts },\n  location: { href },\n}: PostTemplateProps) => {\n  const {\n    node: {\n      id,\n      html,\n      tableOfContents,\n      frontmatter: { title, date },\n    },\n  } = edges[0];\n\n  // console.log('post_template', allPosts);\n\n  //TODO: 이전글/다음글 컴포넌트 추가\n  // 현재글의 id와 allPosts의 아이디를 비교 > allposts에서 해당 인덱스를 찾으면 > 그 인덱스를 기준으로 -1, +1의 인덱스를 저장해서 컴포넌트에 뿌리기\n\n  return (\n    <Template title={title} url={href}>\n      <Container>\n        <PostNav posts={allPosts} />\n        <ContentWrapper>\n          <Content title={title} date={date} html={html} />\n          <CommentWidget />\n        </ContentWrapper>\n        <TableOfContents content={tableOfContents} />\n      </Container>\n    </Template>\n  );\n};\n\nconst Container = styled.section`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  margin: 40px auto;\n  max-width: 1440px;\n`;\n\nconst ContentWrapper = styled.main`\n  max-width: 644px;\n`;\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          id\n          html\n          tableOfContents\n          frontmatter {\n            title\n            date(formatString: \"YYYY.MM.DD.\")\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default PostTemplate;\n"],"names":["NavContainer","target","name","styles","ContentWrapper","Title","ListWrapper","PostLinkItem","_ref","posts","___EmotionJSX","map","_ref2","node","key","id","href","fields","slug","frontmatter","title","Container","PostDate","MarkdownRenderer","date","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","value","setAttribute","appendChild","ref","StyledToc","content","data","allMarkdownRemark","edges","pageContext","allPosts","location","tableOfContents","Template","url","PostNav","Content","CommentWidget","TableOfContents"],"sourceRoot":""}