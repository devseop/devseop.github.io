{"componentChunkName":"component---src-templates-post-template-tsx","path":"/lorem-ipsum-generator/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"cc46ebdf-d56e-53d2-ae84-c356d1276cba","html":"<p>지인이 간단한 웹 페이지가 필요하다고 하여 디자인 작업을 하던 중에 더미 텍스트가 필요했습니다. 시를 이용한 한글 로렘 입숨 생성기를 자주 사용한 터라 해당 사이트에 접속했으나 무슨 일인지 이용할 수가 없었습니다. 의미를 알 수 없는 문장을 넣는 것 뿐인데 그냥 영문으로 된 로렘 입숨을 입력하는 건 뭐가 다른가 싶겠지만 글자 하나하나가 차지하는 공간이 다르고 눈으로 봤을 때 시각적인 느낌도 다릅니다. 어쨌든 필요한 작업물을 전달하고 나서 생각이 들었습니다. ‘제품을 직접 만들고 싶어서 개발자가 되기로 한 거 아니었나? 한 번 만들어보자!‘. 다행이도 이용했던 기억을 되살려봤을 때 기술적인 복잡도가 높지 않을 것 같아 빠르게 실행으로 옮겼습니다.</p>\n<h2 id=\"결과물-미리보기\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC%EB%AC%BC-%EB%AF%B8%EB%A6%AC%EB%B3%B4%EA%B8%B0\" aria-label=\"결과물 미리보기 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과물 미리보기</h2>\n<ul>\n<li><a href=\"https://github.com/devseop/kr-lipsum\" target=\"_blank\" rel=\"nofollow\">https://github.com/devseop/kr-lipsum</a></li>\n</ul>\n<h2 id=\"기술-스택-결정하기\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%88%A0-%EC%8A%A4%ED%83%9D-%EA%B2%B0%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"기술 스택 결정하기 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기술 스택 결정하기</h2>\n<p>프론트엔드는 별다른 고민을 하지 않았습니다. React와 TypeScript를 선택했고, Netlify로 배포하기로 결정했습니다. 스타일은 emotion을 사용했습니다.</p>\n<br />\n<p>문제는 로렘 입숨을 만들 때 필요한 문단 소스(시)였습니다. 해당 데이터는 동적인 데이터가 아니고, 추가적인 정보가 필요한 것도 아니기에 객체 형태로 프로젝트 내부에 저장하여 사용하기로 결정했습니다. 이렇게 되니 백엔드 또한 마찬가지로 구성할 필요가 없었습니다.</p>\n<h2 id=\"개발하기\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0\" aria-label=\"개발하기 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발하기</h2>\n<ol>\n<li>화면에서 옵션(문단 길이와 개수, 소스)을 선택하면 옵션에 따른 한글 로렘 입숨이 노출됩니다.</li>\n<li>선택한 소스는 긴 문자열 형태로 되어있으며, 공백을 기준으로 나뉘고 재조합됩니다.</li>\n</ol>\n<h3>1. 타입 구조</h3>\n<p>TypeScript를 활용하여 프로젝트의 쓰일 type 구조를 미리 정의합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 생성된 한글 로렘 입숨</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ParagraphProps</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 한글 로렘 입숨 생성을 위한 폼양식</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">FormStateProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  paragraphNumber<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  paragraphLength<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  paragraphSource<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  generatedParagraphs<span class=\"token operator\">:</span> ParagraphProps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 한글 로렘 입숨에 쓰일 시 객체</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">PoemProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  author<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  poem<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 시 객체의 모음</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">PoemListProps</span> <span class=\"token operator\">=</span> PoemProps<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">PoemProps</code>는 <code class=\"language-text\">author</code>와 <code class=\"language-text\">poem</code>을 가지고 있는데 이는 기획 초기 단계에 시인의 이름을 활용할 수 있는 방법을 생각했던 흔적입니다. 기획 초기에는 한글 로렘 입숨을 생성하는 것뿐만 아니라 mock data를 만드는 것까지 발전하였으나, 작은 단계부터 실행하여 최소의 결과물을 도출한 후 살을 덧붙여 나가는 것이 나은 판단이라고 생각되어 폐기하였습니다.</p>\n<h3>2. 문자열 재조합</h3>\n<p>선택된 소스의 문자열을 공백(’ ‘)을 기준으로 하여 모두 나눈 후, <code class=\"language-text\">Math.floor</code>와 <code class=\"language-text\">Math.random</code>을 이용하여 분리된 문자열을 선택하기 위한 <code class=\"language-text\">randomIndex</code>를 만들고 이를 이용해 선택된 단어를 <code class=\"language-text\">paragraph</code>에 추가합니다. 이 과정은 <code class=\"language-text\">paragraph</code>의 길이가 <code class=\"language-text\">maxLength</code>보다 커지기 전까지 반복되며, 동작이 끝나면 <code class=\"language-text\">trim()</code>으로 문자열 끝의 공백을 없앤 <code class=\"language-text\">paragraph</code>를 <code class=\"language-text\">randomParagraphs</code>에 넣어 반환하도록 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getRandomParagraphs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  formData<span class=\"token operator\">:</span> FormStateProps<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ParagraphProps <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    paragraphSource<span class=\"token operator\">:</span> source<span class=\"token punctuation\">,</span>\n    paragraphNumber<span class=\"token operator\">:</span> count<span class=\"token punctuation\">,</span>\n    paragraphLength<span class=\"token operator\">:</span> length<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> formData<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> selectedPoem <span class=\"token operator\">=</span> poems<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>peom<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> peom<span class=\"token punctuation\">.</span>subject <span class=\"token operator\">===</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>selectedPoem<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> lines <span class=\"token operator\">=</span> selectedPoem<span class=\"token punctuation\">.</span>poem<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> randomParagraphs<span class=\"token operator\">:</span> ParagraphProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> maxLength <span class=\"token operator\">=</span>\n    length <span class=\"token operator\">===</span> <span class=\"token string\">'아주 짧게'</span>\n      <span class=\"token operator\">?</span> <span class=\"token number\">16</span>\n      <span class=\"token operator\">:</span> length <span class=\"token operator\">===</span> <span class=\"token string\">'짧게'</span>\n      <span class=\"token operator\">?</span> <span class=\"token number\">40</span>\n      <span class=\"token operator\">:</span> length <span class=\"token operator\">===</span> <span class=\"token string\">'중간'</span>\n      <span class=\"token operator\">?</span> <span class=\"token number\">80</span>\n      <span class=\"token operator\">:</span> <span class=\"token number\">120</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> paragraph <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> maxLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> randomIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> lines<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      paragraph <span class=\"token operator\">+=</span> lines<span class=\"token punctuation\">[</span>randomIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    randomParagraphs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>paragraph<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> randomParagraphs<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>3. 동작 확인 및 스타일링</h3>\n<p>정상적으로 동작되는지 확인하고 emotion/styled를 이용해 UI 스타일링을 했습니다.</p>\n<p><img src=\"/9d62869def71e6347e6b636af42c54a1/kr-lipsum.gif\" alt=\"이미지\"></p>\n<h2 id=\"결과\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC\" aria-label=\"결과 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과</h2>\n<ul>\n<li><a href=\"https://kr-lipsum.netlify.app/\" target=\"_blank\" rel=\"nofollow\">kr-lipsum.netlify.app</a></li>\n<li>한글 로렘 입숨이 필요한 분들이라면 사용해보시고 의견을 남겨주세요!</li>\n</ul>\n<h2 id=\"회고\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EA%B3%A0\" aria-label=\"회고 permalink\" class=\"custom-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회고</h2>\n<ul>\n<li>개발자가 되고 싶었던 이유를 실현해볼 수 있었습니다.</li>\n<li>디자이너와 개발자 사이에서 기획적인 부분을 잘 조절하며 진행한 것 같습니다.</li>\n<li><code class=\"language-text\">for</code>함수와 <code class=\"language-text\">while</code>함수를 사용하면서 둘의 차이를 다시 한 번 공부할 수 있었습니다.</li>\n<li>시간을 좀 더 쏟아부어서 짧은 기간에 완성했으면 하는데 그렇지 못한 것은 아쉬웠습니다.</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EA%B2%B0%EA%B3%BC%EB%AC%BC-%EB%AF%B8%EB%A6%AC%EB%B3%B4%EA%B8%B0\">결과물 미리보기</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B8%B0%EC%88%A0-%EC%8A%A4%ED%83%9D-%EA%B2%B0%EC%A0%95%ED%95%98%EA%B8%B0\">기술 스택 결정하기</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0\">개발하기</a></p>\n<ul>\n<li><a href=\"#1-%ED%83%80%EC%9E%85-%EA%B5%AC%EC%A1%B0\">1. 타입 구조</a></li>\n<li><a href=\"#2-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%9E%AC%EC%A1%B0%ED%95%A9\">2. 문자열 재조합</a></li>\n<li><a href=\"#3-%EB%8F%99%EC%9E%91-%ED%99%95%EC%9D%B8-%EB%B0%8F-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81\">3. 동작 확인 및 스타일링</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EA%B3%BC\">결과</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%9A%8C%EA%B3%A0\">회고</a></p>\n</li>\n</ul>","frontmatter":{"title":"한국의 시를 이용한 로렘 입숨 생성기","date":"2023.10.07."}}}]}},"pageContext":{"slug":"/lorem-ipsum-generator/","allPosts":[{"node":{"id":"cc46ebdf-d56e-53d2-ae84-c356d1276cba","fields":{"slug":"/lorem-ipsum-generator/"},"frontmatter":{"title":"한국의 시를 이용한 로렘 입숨 생성기","date":"2023-10-07"}},"next":{"id":"921c146d-b278-5852-9c6f-e1fbb57cb57d","fields":{"slug":"/wanted-preonboarding-review/"},"frontmatter":{"title":"원티드 프리온보딩 인턴십(프론트엔드) 후기"}},"previous":null},{"node":{"id":"921c146d-b278-5852-9c6f-e1fbb57cb57d","fields":{"slug":"/wanted-preonboarding-review/"},"frontmatter":{"title":"원티드 프리온보딩 인턴십(프론트엔드) 후기","date":"2023-09-17"}},"next":{"id":"b6815257-873c-526f-822d-a29bdca965df","fields":{"slug":"/infinite-scroll/"},"frontmatter":{"title":"무한 스크롤 구현하기"}},"previous":{"id":"cc46ebdf-d56e-53d2-ae84-c356d1276cba","fields":{"slug":"/lorem-ipsum-generator/"},"frontmatter":{"title":"한국의 시를 이용한 로렘 입숨 생성기"}}},{"node":{"id":"b6815257-873c-526f-822d-a29bdca965df","fields":{"slug":"/infinite-scroll/"},"frontmatter":{"title":"무한 스크롤 구현하기","date":"2023-09-02"}},"next":{"id":"d845d508-a997-505a-8949-49e09d24ceb3","fields":{"slug":"/useref/"},"frontmatter":{"title":"useRef 알아보기"}},"previous":{"id":"921c146d-b278-5852-9c6f-e1fbb57cb57d","fields":{"slug":"/wanted-preonboarding-review/"},"frontmatter":{"title":"원티드 프리온보딩 인턴십(프론트엔드) 후기"}}},{"node":{"id":"d845d508-a997-505a-8949-49e09d24ceb3","fields":{"slug":"/useref/"},"frontmatter":{"title":"useRef 알아보기","date":"2023-04-10"}},"next":{"id":"f1fb201d-65be-563b-b4cb-4820a32fef79","fields":{"slug":"/js-debouncing-n-throttling/"},"frontmatter":{"title":"자바스크립에서 이벤트 제어하기"}},"previous":{"id":"b6815257-873c-526f-822d-a29bdca965df","fields":{"slug":"/infinite-scroll/"},"frontmatter":{"title":"무한 스크롤 구현하기"}}},{"node":{"id":"f1fb201d-65be-563b-b4cb-4820a32fef79","fields":{"slug":"/js-debouncing-n-throttling/"},"frontmatter":{"title":"자바스크립에서 이벤트 제어하기","date":"2023-03-07"}},"next":{"id":"81144eb3-1a09-5e36-92b1-f5b0d561c44a","fields":{"slug":"/blog-publish-review/"},"frontmatter":{"title":"Gatsby로 블로그 만들기"}},"previous":{"id":"d845d508-a997-505a-8949-49e09d24ceb3","fields":{"slug":"/useref/"},"frontmatter":{"title":"useRef 알아보기"}}},{"node":{"id":"81144eb3-1a09-5e36-92b1-f5b0d561c44a","fields":{"slug":"/blog-publish-review/"},"frontmatter":{"title":"Gatsby로 블로그 만들기","date":"2023-03-01"}},"next":{"id":"6b7e5a80-3eed-5d27-880c-7a37b4bcbc79","fields":{"slug":"/teo-sprint-11th/"},"frontmatter":{"title":"테오의 스프린트 11기 후기"}},"previous":{"id":"f1fb201d-65be-563b-b4cb-4820a32fef79","fields":{"slug":"/js-debouncing-n-throttling/"},"frontmatter":{"title":"자바스크립에서 이벤트 제어하기"}}},{"node":{"id":"6b7e5a80-3eed-5d27-880c-7a37b4bcbc79","fields":{"slug":"/teo-sprint-11th/"},"frontmatter":{"title":"테오의 스프린트 11기 후기","date":"2022-09-01"}},"next":{"id":"d960a264-36d4-562b-8e91-176a4b81f47c","fields":{"slug":"/nth-type-difference/"},"frontmatter":{"title":"nth-child와 nth-of-type의 차이"}},"previous":{"id":"81144eb3-1a09-5e36-92b1-f5b0d561c44a","fields":{"slug":"/blog-publish-review/"},"frontmatter":{"title":"Gatsby로 블로그 만들기"}}},{"node":{"id":"d960a264-36d4-562b-8e91-176a4b81f47c","fields":{"slug":"/nth-type-difference/"},"frontmatter":{"title":"nth-child와 nth-of-type의 차이","date":"2022-08-16"}},"next":{"id":"8a0e2748-badb-5e01-b707-eebd5900a2ee","fields":{"slug":"/pleasy-intern-review/"},"frontmatter":{"title":"플리지 인턴 후기"}},"previous":{"id":"6b7e5a80-3eed-5d27-880c-7a37b4bcbc79","fields":{"slug":"/teo-sprint-11th/"},"frontmatter":{"title":"테오의 스프린트 11기 후기"}}},{"node":{"id":"8a0e2748-badb-5e01-b707-eebd5900a2ee","fields":{"slug":"/pleasy-intern-review/"},"frontmatter":{"title":"플리지 인턴 후기","date":"2022-07-16"}},"next":{"id":"78ae2e56-7d25-555f-885e-d55e458cb6a8","fields":{"slug":"/2nd-project-review/"},"frontmatter":{"title":"위코드 2차 프로젝트 후기"}},"previous":{"id":"d960a264-36d4-562b-8e91-176a4b81f47c","fields":{"slug":"/nth-type-difference/"},"frontmatter":{"title":"nth-child와 nth-of-type의 차이"}}},{"node":{"id":"78ae2e56-7d25-555f-885e-d55e458cb6a8","fields":{"slug":"/2nd-project-review/"},"frontmatter":{"title":"위코드 2차 프로젝트 후기","date":"2022-06-22"}},"next":{"id":"a91abd96-7814-5c35-a5da-90d266e4e40f","fields":{"slug":"/1st-project-review/"},"frontmatter":{"title":"위코드 1차 프로젝트 후기"}},"previous":{"id":"8a0e2748-badb-5e01-b707-eebd5900a2ee","fields":{"slug":"/pleasy-intern-review/"},"frontmatter":{"title":"플리지 인턴 후기"}}},{"node":{"id":"a91abd96-7814-5c35-a5da-90d266e4e40f","fields":{"slug":"/1st-project-review/"},"frontmatter":{"title":"위코드 1차 프로젝트 후기","date":"2022-06-06"}},"next":null,"previous":{"id":"78ae2e56-7d25-555f-885e-d55e458cb6a8","fields":{"slug":"/2nd-project-review/"},"frontmatter":{"title":"위코드 2차 프로젝트 후기"}}}]}},"staticQueryHashes":[],"slicesMap":{}}